import java.nio.file.*
import static java.nio.file.StandardCopyOption.*
import org.gradle.internal.os.OperatingSystem
import java.util.stream.Collectors

plugins {
    id 'java'
}

version '1.0-SNAPSHOT'

repositories {
    flatDir {
        dirs 'libs'
    }
    mavenCentral()
}

// Natives variables for LWJGL and JFX
def os = OperatingSystem.current()
def osArch = System.getProperty("os.arch")
def arm64 = osArch.startsWith("aarch64") || osArch.startsWith("armv8")
def arm32 = osArch.startsWith("arm") && !arm64
def x64 = osArch.contains("64") && !arm32 && !arm64
def x86 = !x64 && !arm32 && !arm64

def lwjglArch = arm64? "-arm64" :arm32? "-arm32" :x64? "" :x86? "-x86" : ""
def lwjglOS = os.linux? "linux" :os.macOsX? "macos" :os.windows? "windows" : os.name
project.ext.lwjglNatives = "natives-${lwjglOS + lwjglArch}"

def joglArch = arm64? "-armv6hv" :arm32? "-armv6" :x64? "-amd64" :x86? "-i586" : ""
def joglOS = os.linux? "linux" :os.macOsX? "macosx" :os.windows? "windows" : os.name
project.ext.joglShortOS = os.linux? "x11" :os.macOsX? "osx" :os.windows? "win" : os.name
project.ext.joglNatives = joglOS + (os.macOsX ? "-universal" : joglArch)

def jfxArch = arm64? "-aarch64" :arm32? "-arm32" :x64? "" :x86? "-x86" : ""
def jfxOS = os.linux? "linux" :os.macOsX? "mac" :os.windows? "win" : os.name
project.ext.jfxNatives = jfxOS + jfxArch

dependencies {
    testImplementation group: 'junit', name: 'junit', version: '4.12'
}

project.ext.lwjglVersion = "3.2.3"
project.ext.jomlVersion = "1.9.23"
project.ext.lwjglNatives = "natives-windows"
project.ext.imguiVersion = '1.81.0'

dependencies {
    // Box2D
    implementation name: 'jbox2d-library'

    // JUnit
    testImplementation('junit:junit:4.13')

    // GSON
    implementation 'com.google.code.gson:gson:2.8.6'

    // ImGUI stuff
    implementation "io.github.spair:imgui-java-app:$imguiVersion"

     // LWJGL stuff
    implementation platform("org.lwjgl:lwjgl-bom:$lwjglVersion")

    implementation "org.lwjgl:lwjgl"
    implementation "org.lwjgl:lwjgl-assimp"
    implementation "org.lwjgl:lwjgl-glfw"
    implementation "org.lwjgl:lwjgl-nfd"
    implementation "org.lwjgl:lwjgl-openal"
    implementation "org.lwjgl:lwjgl-opengl"
    implementation "org.lwjgl:lwjgl-stb"
    runtimeOnly "org.lwjgl:lwjgl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-assimp::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-glfw::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-nfd::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-openal::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-opengl::$lwjglNatives"
    runtimeOnly "org.lwjgl:lwjgl-stb::$lwjglNatives"
    implementation "org.joml:joml:${jomlVersion}"

    implementation "org.openjfx:javafx-base:18.0.1:$project.jfxNatives"
    implementation "org.openjfx:javafx-controls:18.0.1:$project.jfxNatives"
    implementation "org.openjfx:javafx-graphics:18.0.1:$project.jfxNatives"
}

jar {
    manifest {
        attributes (
            'Class-Path': configurations.runtimeClasspath.files.collect { it.getName() }.join(' '),
            'Main-Class': 'Main'
        )
    }

    from {
        configurations.runtimeClasspath.files.collect { it.isDirectory() ? it : zipTree(it) }
    }

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

task copyAssets(type: Copy) {
    copy {
        from "assets"
        into "${buildDir}/libs/assets"
    }

    copy {
        from "level.txt"
        into "${buildDir}/libs"
        
    }   
}

task fatJar(type: Jar) {
  manifest.from jar.manifest
  from {
    configurations.runtimeClasspath.collect { it.isDirectory() ? it : zipTree(it) }
  } {
    exclude "META-INF/*.SF"
    exclude "META-INF/*.DSA"
    exclude "META-INF/*.RSA"
  }
  with jar

    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

fatJar.dependsOn(copyAssets)

artifacts {
    archives fatJar
}

tasks.withType(Copy) {
    filesMatching("**") {
        duplicatesStrategy = DuplicatesStrategy.INCLUDE
    }
}